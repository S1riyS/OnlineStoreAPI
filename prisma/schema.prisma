generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String  @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String?
  hashedRt    String? // Hashed refresh token

  cart   Cart?
  orders Order[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @unique
  items Item[]

  // One-to-Many self-relation
  parentId        Int?
  parentCategory  Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryTree")
  nestingLevel    Int        @default(1)

  additionalProps AdditionalProp[]

  @@map("categories")
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @unique
  slug        String @unique
  description String
  image       String
  price       Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  additionalProps ItemAdditionalProps[]
  carts           CartItems[]
  orders          OrderItems[]

  @@map("items")
}

model AdditionalProp {
  id   Int    @id @default(autoincrement())
  name String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  items ItemAdditionalProps[]

  @@map("additional_props")
}

model ItemAdditionalProps {
  id    Int    @id @default(autoincrement())
  value String

  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  additionalPropId Int
  additionalProp   AdditionalProp @relation(fields: [additionalPropId], references: [id])

  @@map("item_additional_props")
}

model Cart {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  items CartItems[]

  @@map("carts")
}

model CartItems {
  id Int @id @default(autoincrement())

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  itemId  Int
  item    Item @relation(fields: [itemId], references: [id])
  counter Int // Quantity of items

  @@map("cart_items")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  status  OrderStatus    @default(BEING_PROCESSED)
  details OrderDetails[]
  items   OrderItems[]

  @@map("orders")
}

model OrderDetails {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])

  deliveryAddress String
  name            String
  email           String
  phoneNumber     String

  deliveryDate  DateTime
  deliveryPrice Int

  @@map("order_details")
}

model OrderItems {
  id Int @id @default(autoincrement())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  BEING_PROCESSED
  IS_CANCELLED
  BEING_DELIVERED
  IS_RECEIVED
}
